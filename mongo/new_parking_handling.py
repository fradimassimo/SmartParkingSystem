from pymongo import MongoClient
import json

# Function to insert new annotations into MongoDB from a file generated by ultralytics

def insert_parking_and_annotations(parking_data, json_file):
    """
    Inserts a new parking entry into the `parkings` collection
    and its associated annotations into the `annotations` collection.
    
    Args:
        parking_data (dict): Parking details (parking_id, name, location, paying_hours, price_per_hour).
        json_file (str): Path to JSON file containing segmentation points.
    """
    try:
        client = MongoClient("mongodb://mongodb:27017/")
        db = client.parking_management 
        parkings_collection = db.parkings
        annotations_collection = db.annotations
        
        if parkings_collection.find_one({"parking_id": parking_data["parking_id"]}):
            print(f"Parking ID {parking_data['parking_id']} already exists. Skipping insertion.")
        else:
            parkings_collection.insert_one(parking_data)
            print(f"Inserted parking {parking_data['parking_id']} successfully.")
        
        # Load JSON file with segmentation points
        with open(json_file, "r") as f:
            segmentation_data = json.load(f)
        
        for i, segment in enumerate(segmentation_data):
            annotation = {
                "annotation_id": f"{parking_data['name']}_{i}",
                "parking_id": parking_data["parking_id"],
                "segmentation": segment["points"]
            }
            annotations_collection.insert_one(annotation)
        
        print(f"Inserted {len(segmentation_data)} annotations for parking {parking_data['parking_id']}.")
        
    except Exception as e:
        print(f"Error inserting parking and annotations: {e}")
    finally:
        client.close()

def prompt_parking_details():
    """Prompt the user to manually enter new parking details."""
    print("\n--- Enter New Parking Details ---")
    
    parking_id = int(input("Enter Parking ID: "))
    name = input("Enter Parking Name: ")
    latitude = float(input("Enter Latitude: "))
    longitude = float(input("Enter Longitude: "))
    paying_hours = input("Enter Paying Hours (e.g., 8:00-20:00): ")
    price_per_hour = float(input("Enter Price Per Hour (0 for free): "))
    annotations_path = input("Enter path to JSON file with annotations computed via Ultralytics: ")

    return {
        "parking_id": parking_id,
        "name": name,
        "location": {"latitude": latitude, "longitude": longitude},
        "paying_hours": paying_hours,
        "price_per_hour": price_per_hour,
        "annotations_path": annotations_path
    }

if __name__ == "__main__":

    # Prompt user to enter new parking details and annotations from image
    new_parking = prompt_parking_details()

    # code to run if a new parking is added, used to select all parkings, comment if annotations are already present:_
    # solutions.ParkingPtsSelection()
    # needs to run outside of the container

    annotation_file = f"{new_parking['annotations_path']}parking_{new_parking['parking_id']}.json"

    insert_parking_and_annotations(new_parking, annotation_file)
